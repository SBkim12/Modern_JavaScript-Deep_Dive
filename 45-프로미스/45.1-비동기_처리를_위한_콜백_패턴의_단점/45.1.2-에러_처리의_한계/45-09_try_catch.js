try{
    setTimeout(() => {throw new Error('Error!'); }, 1000);
}catch (e){
    // 에러를 catch하지 못한다.
    console.error('캐치한 에러', e);
}

/*
에러가 try-catch 문에서 캐치 되지 않는다.
setTimeout은 비동기 함수이므로 콜백 하뭇가 호출되는 것을 기다리지 않고 즉시 종료되어 콜 스택에서 제거된다. 이후 타이머가 만료되면 setTimeout 함수의 콜백함수는 태스크 큐로 푸시되고 콜 스택이 비어졌을 때 이벤트 루프에 의해 콜 스택을 푸시되어 실행된다.

에러는 호출자 방향으로 전파된다.
=> 콜 스택의 아래 방향(실행 중인 실행 컨텍스트가 푸시되기 직전에 푸시된 실행 컨텍스트 방향)으로 전파된다.
하지만 setTimeout 함수의 콜백 함수를 호출한 것은 setTimeout 함수가 아니다. => setTimeout 함수의 콜백 함수가 발생시킨 에러는 catch 블록에서 캐치되지 않는다.



위 콜백 패턴의 문제점(콜백 헬, 에러처리) 극복을 위해 ES6에서 Promise가 도입되었다.
*/